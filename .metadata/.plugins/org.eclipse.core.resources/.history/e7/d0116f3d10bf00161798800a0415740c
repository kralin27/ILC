package com.kralin27.ilc.fall2016.controller;

import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.ui.Model;

import com.kralin27.ilc.fall2016.exception.CustomGenericException;
import com.kralin27.ilc.fall2016.service.WeatherService;

@Controller
public class HomeController {
	
	@Autowired
	private WeatherService weatherService;	

	@RequestMapping("/")
	public String welcome(Model model) {
		model.addAttribute("greeting", "Welcome to TESC Weather Readings");
		model.addAttribute("tagline", "Lindsey Kramer's ILC");
		//model.addAttribute("RecordCount", weatherService.getRecordCount());
		return "welcome";
	}

	@RequestMapping("/Summary")
	public String getWeatherReadingsSummary(Model model) {
		//WeatherReadingsSummary weatherReadingsSummary = weatherService.getWeatherReadingsSummary();
		
		//model.addAttribute("ReadingsCount",weatherReadingsSummary.getReadingsCount());
		//model.addAttribute("ReadingFirst",weatherReadingsSummary.getReadingFirst());
		//model.addAttribute("ReadingLast",weatherReadingsSummary.getReadingLast());
		model.addAttribute("weatherReadingsSummary", weatherService.getWeatherReadingsSummary());
		return "Summary";
	}		
	
	@RequestMapping("/WeatherReading")
	public String getWeatherReadingById(@RequestParam("id") Integer id, Model model) {
		model.addAttribute("weatherReading", weatherService.getWeatherReadingById(id));
		return "WeatherReading";
	}	
	
	@RequestMapping("/WeatherReadings/Date")
	public String getWeatherReadingsByDate(@RequestParam("date") String date, Model model) {
		model.addAttribute("weatherReadings", weatherService.getWeatherReadingsByDate(date));
		model.addAttribute("dataType", "date");		//used in jsp to determine if Date url is presented 
		model.addAttribute("heading", date);   		//used in jsp page title
		return "WeatherReadings"; // /WeatherReadings/Date and /WeatherReadings/Measure/{measure} use the same view
	}		

	@RequestMapping("/Search")
	public String redirectSearch() {
		//throw new CustomGenericException("E888", "This is custom message");
		return "Search";
	}			
	
	@RequestMapping("/WeatherReadings/Measure/{measure}")
	public String getWeatherReadingsByMeasure(
			@PathVariable("measure") String measure, 
			@RequestParam(value="records", defaultValue = "25") Integer records, // &records=nn is optional in request;  defaults to 25
			Model model) 
	{
		model.addAttribute("weatherReadings", weatherService.getWeatherReadingsByMeasure(measure,records));
		model.addAttribute("dataType", "measure"); 		//used in jsp to determine if Date url is presented
		model.addAttribute("heading", measure);  		//used in jsp page title
		return "WeatherReadings"; // /WeatherReadings/Date and /WeatherReadings/Measure/{measure} use the same view
	}	
	
	@RequestMapping("/WeatherReadings/Missing")
	public String getWeatherReadingMissing(Model model){
		model.addAttribute("weatherReadingsMissing", weatherService.getWeatherReadingMissing()); 
		return "Missing"; 
	}
	
	@RequestMapping("/WeatherReadings/Missing/Date")
	public String getWeatherReadingMissingDetail(@RequestParam("date") String date, Model model){
		model.addAttribute("weatherReadingMissingDetail", weatherService.getWeatherReadingMissingDetail(date)); 
		return "MissingDetail2"; 
	}
	
	// a request for http://localhost:8080/webstore2/static becomes http://localhost:8080/webstore2/static/static.html 
	@RequestMapping("/static")
	public String redirect() {
	    return "redirect:/static/static.html";
	}
	
	// custom exception handler - we can throw 
	@ExceptionHandler(CustomGenericException.class)
	public ModelAndView handleCustomException(CustomGenericException ex) {

		ModelAndView model = new ModelAndView("error/generic_error");
		model.addObject("errCode", ex.getErrCode());
		model.addObject("errMsg", ex.getErrMsg());

		return model;
	}	
	
	// controller level exception handler
	@ExceptionHandler(Exception.class)
	public ModelAndView handleAllException(Exception ex) {
		// logger.error("Request: " + req.getRequestURL() + " raised " + ex);

		ModelAndView model = new ModelAndView("error/generic_error");
		model.addObject("errMsg", ex.getMessage());

		return model;

	}	
	
}
