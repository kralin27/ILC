Lindsey Kramer 
Fall Quarter ILC: Developing a Full-Stack Data Driven Web Application
Source Code: https://github.com/kralin27/ILC

--------------------------------------------------------------------
## Overview 

A general description of the project structure and learning goals. 
--------------------------------------------------------------------

The objective of this project was to gain familiarity with the Model View Controller architecture and experience working with an open source development environment, like Spring MVC. To gain experience working with a real world data set I chose the weather data collected from Campbell Scientific Weather station at Evergreen, which allowed me to experience some of the challenges that come with handling raw data (ex. handling missing values in a dataset). Using the Spring MVC request flow as a guide, I developed a full stack Spring MVC web application that allows for querying of the weather reading dataset by date, displays the most extreme weather readings and displays the dates with missing readings. I wrote and implemented database stored procedures to query the database, which I found preferable to writing SQL code directly in the repository layer (WeatherRepositoryImpl.java) because it provided more abstraction. 

I focused on structuring my application based on best practices that are often associated with developing an enterprise-level web application, mainly organizing the source code into layers (presentation, domain, services and persistence) for the purpose of improving reusability and loose coupling. I found that this provided a level of abstraction that seemed almost unnecessary with an application of this scale, however it made my code more organized and it was it was easy to see how seperating the application into these different layers would be helpful in simplifying/organizing the code base for larger projects and would allow for multiple teams to work on different components simultanously without knowing the exact implementations of other layers.

While I was not able to complete as much of my initial project plan as I had hoped, I still gained valuable experience working with the Model View Controller archtecture and understanding how structure of an enterprise-level web application is organized. I found that getting the opportunity to create a full stack application gave me a much more solid understanding of the development process and how different components work together. I found that of all the components I enjoyed the database development the most, and I see myself spending time in the future expanding upon the database foundations I gained working with this application. 

--------------------------------------------------------------------
## Development Process 
--------------------------------------------------------------------

Workflow: 
Domain Class
Peristence Lyaer
	Interface
	Implementation
Service Layer
	Interface
	Implementation
Controller
View



--------------------------------------------------------------------
## Overview of Web Application Layers and Spring MVC Request flow 
--------------------------------------------------------------------

A web application can be organized into four main layers: 

1. Domain: The domain layer of an application consists of domain objects, a representation of the data storage types required by the business logic of our application. Domain layer classes hold information that is received from the database records (peristance layer) In my application there are three different domain objects: Timestamp.java, WeatherReading.java, and WeatherReadingSummary.java.

2. Persistance: The persistance layer of an appication contains repository classes that allow us to perform CRUD (Create, Read, Update, Delete) operations on domain objects. A repository object will send queries to the database, mpa the data from the database to a domain object and then persist the changes in the domain object to the database. In Spring MVC applications, the "@Repository" annotation is included at the beginning of a class to mark it as a repository. My application has two persistance layer classes: WeatherRepository and WeatherRepositoryImpl.java.    

3. Service: The service layer contains the business logic of data retrieval, service objects rely on repository objects to actually carry out all data access related operations. My application has two service layer classes: WeatherService and WeatherServiceImpl.java. 

4. Presentation: The presentation layer handles web requests and view related activites, it includes the Dispatcher servlet, controllers, and view resolvers. The presentation layer is organized into three logical sublayers, the model (responsible for managing date), the view (responsible for managing the user interface) and the controller (responsible for managing interactions between the user, the user interface and the data). HomeController.java, and all the View files in src/main/webapp/jsp are part of the presentation layer. 

Below is an overview of a typical Spring MVC request flow: 

1. The user enters a URL in the browser. The request comes to the Dispatcher servlet, which acts as the main point of entry to the application. 

2. The Dispatcher servlet is responsible for figuring out which controller it needs to send the request to and then dispatching the request to that controller. 

3. The controller method updates the objects in the model before returning the logical view name and updated model to the Dispatcher servlet. 

4. The dispatcher servlet consults with the view resolver to identify the correct view to render. The model's data is passed to the appropriate view. 

5. 

--------------------------------------------------------------------
## Overview of Major Classes 
--------------------------------------------------------------------

Application Configuration: 

- DispatcherServletInitializer.java - There is generally one dispatcher servlet initializer in a Spring MVC application. This class configures the "front door of the web application". It is where we choose what servlet mappings to get and is responsible for mapping a given URL to the appropriate controller methods, a process that is known as request mapping. If no appropriate controller method can be found, the user will receive an HTTP status 404 error. 

There are three important methods in DispatcherServletInitializer: 
-getRootConfigClasses(): specifies the configuration classes for the root application context 
-getServletConfigClasses(): specifies the configuration classes for the Dispatcher servlet application context
-getServletMappings(): specifies the servlet mappings for DispatcherServlet

- WebApplicationContextConfig.java - There is a context config file for each dispatcher servlet. This purpose of this class is to identify/resolve views that have to be rendered as a response to a specific web request. 

- RootApplicationContextConfig.java - There is one root application context config per application, it is shared by all dispatcher servlets. This class invokes configuration once the application is first run. 



--------------------------------------------------------------------
## Self Evaluation

A summary of progress for individual learning objectives as defined by my original contract. 
--------------------------------------------------------------------

1. I will learn to use and efficiently coordinate Java, Spring MVC, AngularJS, REST API, MySQL, Stored Procedures, Tomcat and GitHub to create a full-stack web application. I will learn how to implement version/source control for all code and scripts used in developing this system

2. I will learn to use database stored procedures to allow the data in the database to be read, managed and manipulated in the four basic ways : create, read, update and delete (CRUD).

3. I will gain familiarity with web development through the creation of a web page that will allow a user to interact with the database. I will gain experience hosting an application on a web server such as Tomcat.

4. I will become familiar with the process of designing a java application that will interact with the database and effectively utilize an open source development framework such as Spring MVC.

5. I will gain familiarity with database security principles as well as AngularJS and how it interacts with Spring MVC.

A security feature that was able to be implemented was that the user that you use to connect to the database (in config.properties) is webUser who only has rights to execute stored procedures - no rights to add/update/delete to the tables directly.


--------------------------------------------------------------------
-- Areas of improvment/Future study
--------------------------------------------------------------------
